import openai
import os
from dotenv import load_dotenv

load_dotenv()  # Carrega as vari√°veis do .env

# Configura√ß√£o para nova vers√£o da OpenAI (1.0+)
api_key = os.getenv("OPENAI_API_KEY")
if not api_key or api_key == "sk-sua-chave-real-aqui":
    print("‚ö†Ô∏è ATEN√á√ÉO: Configure sua chave da OpenAI no arquivo .env")
    client = None
else:
    client = openai.OpenAI(api_key=api_key)

RESPOSTAS_AUTOMATICAS = {
    "Produtivo": "Ol√°! Recebemos sua solicita√ß√£o e em breve retornaremos com uma solu√ß√£o. Obrigado pelo contato.",
    "Improdutivo": "Agradecemos sua mensagem! Caso precise de algo, estamos √† disposi√ß√£o."
}

def gerar_resposta_com_gpt(texto_original):
    prompt = (
       "Considere que voc√™ √© um assistente profissional respondendo a um email de forma educada, clara e objetiva.\n\n"
    "Lembre-se: emails produtivos s√£o aqueles que geram resultados concretos e estrat√©gicos, "
    "enquanto emails improdutivos s√£o aqueles que consomem tempo sem retorno real. "
    "A diferen√ßa est√° no foco, na gest√£o da rotina e no impacto das tarefas executadas.\n\n"
    f"Email recebido:\n{texto_original}\n\n"
    "IMPORTANTE: Responda APENAS em PORTUGU√äS BRASILEIRO.\n\n"
    "Escreva uma resposta adequada para este conte√∫do, mantendo o tom humano, respeitoso e alinhado ao contexto empresarial. "
    "Use linguagem formal mas acess√≠vel, t√≠pica de comunica√ß√£o corporativa brasileira."
    )

    try:
        if client is None:
            return "‚ö†Ô∏è Configure sua chave da OpenAI no arquivo .env"
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6,
            max_tokens=300
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        error_msg = str(e)
        if "insufficient_quota" in error_msg or "429" in error_msg:
            return "üí≥ Cr√©ditos da OpenAI esgotados. Usando resposta autom√°tica padr√£o."
        return f"[Erro ao gerar resposta: {error_msg}]"

def resposta_automatica_por_categoria(categoria):
    """
    Retorna a resposta autom√°tica baseada na categoria do email.
    """
    return RESPOSTAS_AUTOMATICAS.get(
        categoria,
        "N√£o foi poss√≠vel sugerir uma resposta autom√°tica para esta categoria."
    )

# Fun√ß√£o para gerar uma resposta usando o modelo GPT-3.5 Turbo
# Ela recebe o texto original do email e retorna uma resposta formatada.